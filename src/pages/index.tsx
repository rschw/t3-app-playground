import type { NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { trpc } from "../utils/trpc";

const GithubProfile: React.FC<{ userName: string }> = ({ userName }) => {
  // fully type-safe query interface based on trcp router definition
  // check network tab to observe that both useQuery() definitions get batched in a single request
  const { data, isLoading } = trpc.useQuery(["github.profile", userName]);

  if (isLoading)
    return <div className="flex items-center justify-center text-green-500">Loading profile..</div>;

  return (
    <div className="flex gap-2 items-center">
      <img className="h-12 w-12 rounded-full object-cover" src={data.avatar_url} />
      <div className="flex flex-col">
        <a
          className="text-sm text-violet-500 underline decoration-dotted underline-offset-2 cursor-pointer"
          href={data.html_url}
          target="_blank"
          rel="noreferrer"
        >
          {data.login}
        </a>
        <div className="flex gap-2">
          <span className="text-sm text-gray-600">{data.followers} followers</span>
          <span className="text-sm text-gray-600">{data.following} following</span>
          <span className="text-sm text-gray-600">{data.public_repos} ðŸ“¦</span>
        </div>
      </div>
    </div>
  );
};

const HomeContents = () => {
  const { data, status } = useSession();

  if (status === "loading") return <div>Loading...</div>;

  if (!data)
    return (
      <div>
        Please log in
        <button onClick={() => signIn()}>Sign In</button>
      </div>
    );

  return (
    <div>
      Hello {data.user?.name}
      <button onClick={() => signOut()}>Sign Out</button>
      <GithubProfile userName={data.user?.name!} />
    </div>
  );
};

const Home: NextPage = () => {
  const hello = trpc.useQuery(["example.hello", { text: "from tRPC" }]);

  return (
    <>
      <Head>
        <title>T3 App Playground</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <HomeContents />
    </>
  );
};

export default Home;
